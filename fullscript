#R script for the analysis of heritablity and selection of house sparrow ornaments

rm(list=ls()) #clear workspace
setwd("~/data") #set working directory
getwd() #check working directory contents

#install packages needed for all analyses
install.packages("plyr")
install.packages("dplyr")
install.packages("lubridate")
install.packages("lattice")
install.packages("pedantics")
install.packages("MCMCglmm")
install.packages("ggplot2")
install.packages("tidyr")

#load all packages needed 
require(plyr)
require(dplyr)
require(lubridate)
require(lattice)
require(pedantics)
require(MCMCglmm)
require(ggplot2)
require(tidyr)

#preparing the data for analysis
sparrows<-read.delim("morphdata.txt",header=TRUE) #import observational dataset
head(sparrows) #check observations within dataset
str(sparrows) #check structure of dataset
sparrows<-subset(sparrows, sparrows$CaptureRef!="NA!") #remove empty observation fields (imported from excel)

#visualise the data 
par(mfrow=c(1,3)) #set display to show all 3 graphs side by side
hist(sparrows$HB) #distribution of hidden badge size
hist(sparrows$VB) #distribution of visible badge size
hist(sparrows$MA) #distribution of mask size
dev.off()

#descriptive stats of visible badge- mean, variance and range
summarise(sparrows, VBmean=(mean(sparrows$VB, na.rm=TRUE)), VBvar=var(sparrows$VB, na.rm=TRUE), 
          minimumVB=range(VB, na.rm=TRUE)[1], maximumVB=range(VB, na.rm=TRUE)[2])

#descriptive stats of hidden badge- mean, variance and range
summarise(sparrows, HBmean=(mean(sparrows$HB, na.rm=TRUE)), HBvar=var(sparrows$HB, na.rm=TRUE), 
          minimumHB=range(HB, na.rm=TRUE)[1], maximumHB=range(HB, na.rm=TRUE)[2])

#descriptive stats of mask- mean, variance and range
summarise(sparrows, MAmean=(mean(sparrows$MA, na.rm=TRUE)), MAvar=var(sparrows$MA, na.rm=TRUE), 
          minimumMA=range(MA, na.rm=TRUE)[1], maximumMA=range(MA, na.rm=TRUE)[2])

#create variable of Moult status, where birds measured in Oct. and Nov. are in moult ("YES")
sparrows$month<-month(sparrows$CaptureDate) #make a variable of month of capture
sparrows$moult[sparrows$month=="10"]<-"YES" #code oct. captures as in moult
sparrows$moult[sparrows$month=="11"]<-"YES" #code nov. captures as in moult
sparrows$moult[is.na(sparrows$moult)]<-"NO" #not measured during moult months

#extract year as a variable from capture date
sparrows$captureyear<-format(as.Date(sparrows$CaptureDate, format="%d/%m/%Y"),"%Y")

#visualise plumage data by year to see any clear patterns
boxplot(sparrows$VB~sparrows$captureyear) #VB by year
boxplot(sparrows$HB~sparrows$captureyear) #HB by year
boxplot(sparrows$MA~sparrows$captureyear) #MA by year

#import and inspect natal and foster brood data
brooddata<-read.delim("brooddata.txt", header=TRUE)
head(brooddata)
str(brooddata) 

#merge brood data with main data for every measured bird
sparrows<- merge(sparrows, brooddata, by=c("BirdID"), all=F) 

#create age variable, where birth to first moult (october) is age 0, 1st moult to 2nd moult is age 1, etc. 
sparrows$captureyear<-as.numeric(sparrows$captureyear) #make variable numeric
sparrows$Cohort<-as.numeric(sparrows$Cohort) #make variable numeric
sparrows$age<-sparrows$captureyear-sparrows$Cohort #create basic age using only years
sparrows$oct<-ifelse(sparrows$month>=10, 1, 0) #create variable where birds born in or after october are coded as 1
sparrows$age<-sparrows$age+sparrows$oct #adds 1 to age of sparrow caught in october or  later as this is post-moult

#view relationship between age and plumage traits
boxplot(sparrows$HB~sparrows$age) #plot HB by age
boxplot(sparrows$VB~sparrows$age) #plot VB by age
boxplot(sparrows$MA~sparrows$age) #plot MA by age

#count number of individuals measured
length(unique(sparrows$BirdID))

#count natal broods and foster broods
length(unique(sparrows$NatalBrood)) #this counts all broods in dataset
length(unique(sparrows$FosterBrood)) 

#create 2-level factor of whether birds were fostered or not (1/0)
sparrows$Fostered<-ifelse((is.na(sparrows$FosterBrood)), 0, 1)

#count fostered and non-fostered sparrows
length(unique(sparrows$BirdID[sparrows$Fostered==1]))

#visualise effects of fostering on traits
boxplot(sparrows$VB~sparrows$Fostered)
boxplot(sparrows$HB~sparrows$Fostered)
boxplot(sparrows$MA~sparrows$Fostered)

#see if there is statistical significance between means to ensure fostering itself isn't affecting plumage
t.test(VB~Fostered, data=sparrows) #no significance found
t.test(HB~Fostered, data=sparrows) #no significance found
t.test(MA~Fostered, data=sparrows) #no significance found

#import and inspect social parent data
parentdata<-read.delim("socialparents.txt", header=T)
str(parentdata)
head(parentdata)

#combine social parent data with morphological data
sparrows$SocialBroodID<-ifelse(is.na(sparrows$FosterBrood), sparrows$NatalBrood, sparrows$FosterBrood) #create variable with social brood ID of all fostered and non-fostered chicks
parentdata$SocialBroodID<-parentdata$BroodRef #create variable of same name as in the main dataset to combine
sparrows<- merge(sparrows, parentdata, by=c("SocialBroodID"), all=F) #merge by new social brood variables

#import and inspect pedigree
ped<-read.table("pedigree.txt", header=TRUE)
head(ped)
str(ped)
full.stats<-pedigreeStats(ped, graphicalReport="N") #summary statistics from the full pedigree
fixedped<-fixPedigree(ped) #order the pedigree for use in animal models

#draw pedigree
drawPedigree(fixedped, dots="y") #plot the pedigree        
measuredped<-fixedped #make a vector of length of pedigree 
measuredped$measured<- ifelse(measuredped$id %in% sparrows$BirdID=="TRUE", 1, 0) #identify the informative individuals that have been measured for the traits
drawPedigree(measuredped, dots="Y", dat=measuredped$measured, retain="informative") #redraw pedigree with uninformative individuals in grey
informative.stats<- pedigreeStats(fixedped, dat=measuredped$measured, retain="informative",
                                  graphicalReport="N") #summary statistics from the informative pedigree 
pedStatSummary(full.stats, informative.stats) #compare full & informative pedigree summary statistics

#create animal variable using BirdID in main dataset (to merge with the pedigree)
sparrows$animal<-sparrows$BirdID 

#combine phenotypic dataset with the pedigree
sparrows<- merge(sparrows, ped, by=c("animal"), all=F) #merge pedigree with main dataset, without non-measured birds from pedigree
head(sparrows) #checks whole dataset and newly imported variables

#create separate datasets for each trait with the NAs removed 
VB<-subset(sparrows, sparrows$VB!="NA")
write.table(VB, "VB.txt") #save VB dataset to the working directory
HB<-subset(sparrows, sparrows$HB!="NA")
write.table(HB, "HB.txt") #save HB dataset to the working directory
MA<-subset(sparrows, sparrows$MA!="NA")
write.table(MA, "MA.txt") #save MA dataset to the working directory

#VISIBLE BADGE====
#import and inspect visible badge data
VB<-read.table("VB.txt", header=T)
head(VB)
str(VB)

#visualise VB data
hist(VB$VB) #view VB distribution
boxplot(VB$VB~VB$Cohort) #dips around 2007
boxplot(VB$VB~VB$age) #seems fairly constant
boxplot(VB$VB~VB$Observer) #AS also noticeably different here

#check statistical difference between AS measures and overall mean
t.test(VB$VB[VB$Observer=="AS"], VB$VB) #test statistical difference - very different
AS<-length(VB$BirdID[VB$Observer=="AS"]) #find total number of VB observations of 'AS' 
ALL<-length(VB$BirdID) #find total number of VB observations 
(AS/ALL)*100 #find the percentage of all VB observations taken by AS
VB<-subset(VB, Observer!="AS") #remove observer from data

#find total number of birds measured and the repeated measures
length(unique(VB$BirdID)) #find total individuals measured
VB.repeats<-VB%>%group_by(BirdID)%>%summarise(n=length(VB)) #create dataframe of no. measurements taken of each bird
VB.repeats%>%group_by(n)%>%summarise(length(BirdID)) #find how many birds were subject to each number of repeated measurements
length(VB$BirdID) #find total number of observations

#visible badge summary stats - mean, variance and range
mean(VB$VB)
var(VB$VB)
range(VB$VB)

#Age-corr VB====
VB.var<-var(VB$VB)  #assign variance to a name to use as start point for the model              
VB.prior <- list(G = list(G1 = list(V = (VB.var/6), n = 1),
                          G2 = list(V = (VB.var/6), n = 1),
                          G3 = list(V = (VB.var/6), n = 1),
                          G4 = list(V = (VB.var/6), n = 1),
                          R = list(V = (VB.var/6), n = 1))) 
VBmod.agecorr<-MCMCglmm(VB~age+moult, random=~BirdID+animal+Cohort+captureyear
                        +Observer, prior=VB.prior, pedigree=fixedped, data=VB, 
                        thin=1000, burnin=10000, nitt=1000000, verbose=F) #run best age-corr VB model
save(VBmod.agecorr, file="VBmod.agecorr.Rdata") #save model output
summary(VBmod.agecorr) #view model results
plot(VBmod.agecorr) #diagnostic plots
autocorr(VBmod.agecorr$VCV) #check autocorrelations
autocorr(VBmod.agecorr$Sol) #check autocorrelations
posterior.mode(VBmod.agecorr$VCV) #view posterior modes of the variance component estimates
HPDinterval(VBmod.agecorr$VCV) #view credible intervals of the variance component estimates
posterior.mode(VBmod.agecorr$Sol) #view posterior modes of the fixed factors
HPDinterval(VBmod.agecorr$Sol) #view credible intervals of the fixed factors
VBmod.agecorr.vp.full<-(VBmod.agecorr$VCV[,"BirdID"]+VBmod.agecorr$VCV[,"animal"]
                        +VBmod.agecorr$VCV[,"units"]+VBmod.agecorr$VCV[,"Cohort"]
                        +VBmod.agecorr$VCV[,"captureyear"]+VBmod.agecorr$VCV[,"Observer"]) #find total phenotypic variance
posterior.mode(VBmod.agecorr.vp.full) #view total phenotypic variance
HPDinterval(VBmod.agecorr.vp.full) #view phenotypic variance credible intervals
VBmod.agecorr.vp<-(VBmod.agecorr$VCV[,"BirdID"]+VBmod.agecorr$VCV[,"animal"]
                   +VBmod.agecorr$VCV[,"units"]+VBmod.agecorr$VCV[,"Cohort"]) #find VB adjusted VB with obs. and capture year
posterior.mode(VBmod.agecorr.vp) #view adjusted VB adjusted variance
HPDinterval(VBmod.agecorr.vp) #view adjusted VB adjusted variance credible interval
VBmod.agecorr.h2<-VBmod.agecorr$VCV[,"animal"]/VBmod.agecorr.vp #find age-corr. VB heritability
posterior.mode(VBmod.agecorr.h2) #view heritability
HPDinterval(VBmod.agecorr.h2) #view CIs
VBmod.agecorr.pe<-VBmod.agecorr$VCV[,"BirdID"]/VBmod.agecorr.vp #find PE variance
posterior.mode(VBmod.agecorr.pe) #view PE var.
HPDinterval(VBmod.agecorr.pe) #view CIs
VBmod.agecorr.by<-VBmod.agecorr$VCV[,"Cohort"]/VBmod.agecorr.vp #find Cohort effects
posterior.mode(VBmod.agecorr.by) #view cohort effects
HPDinterval(VBmod.agecorr.by) #view CIs
VBmod.agecorr.r<-VBmod.agecorr$VCV[,"units"]/VBmod.agecorr.vp #find residual variance 
posterior.mode(VBmod.agecorr.r) #view residual variance 
HPDinterval(VBmod.agecorr.r) #view CIs

#find VB age-corrected evolvability (mean-standardised)
posterior.mode(VBmod.agecorr$VCV[,"animal"])/(mean(VB$VB)*mean(VB$VB))

#VB by age====
VB.ages <- split( VB , f = VB$age )#split dataset into a list of dataframes of each age
for (i in 1:length(VB.ages)) {
  assign(paste0("VB.age", i), as.data.frame(VB.ages[[i]]))
} #change list of dataframes to separate dataframes for each age
VB.summstats<-VB%>%group_by(age)%>%summarise(VB=mean(VB), n=length(unique(BirdID)))#find means and sample sizes for VB measures by age
View(VB.summstats)
VB.age4to8 <- rbind(VB.age4, VB.age5, VB.age6, VB.age7, VB.age8) #create df with all age 4-8 because of the small sample sizes
length(VB.age4to8$BirdID) #count number of observations
length(unique(VB.age4to8$BirdID)) #count age 4-8 birds measured for VB

#age 4-8 summary stats
mean(VB.age4to8$VB)
var(VB.age4to8$VB)
range(VB.age4to8$VB)

#create bar chart of VB sample sizes by age
VB.summstats<-rbind(VB.summstats, c("4 to 8", NA, 71)) #add new merged group sample size to df
VB.summstats<-VB.summstats[-c(4:8), ]  #remove all individual 4-8 sample sizes
VB.summstats$n<-as.numeric(as.character(VB.summstats$n)) #make n numeric for plotting
VB.summstats$age<-as.factor(VB.summstats$age) #make age a factor for plotting

png(filename="VB.n.byage.png", width=500, height=400, units="px") #open file to save plot to working directory
ggplot(VB.summstats, aes(x=age, y=n, group=1, fill=age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("grey78", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("n")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16)) #plot bar chart of sample size by age 
dev.off()

#show distributions for VB size of each age groups
par(mfrow=c(2,2))
hist(VB.age1$VB)
hist(VB.age2$VB)
hist(VB.age3$VB)
hist(VB.age4to8$VB) #all look nice and normal

#age 1 VB model====
VB.age1.var<-var(VB.age1$VB) #find age 1 VB variance
VB.age1.prior <- list(G = list(G1 = list(V = (VB.age1.var/6), n = 1),
                               G2 = list(V = (VB.age1.var/6), n = 1),
                               G3 = list(V = (VB.age1.var/6), n = 1),
                               G4 = list(V = (VB.age1.var/6), n = 1),
                               R = list(V = (VB.age1.var/6), n = 1)))  #set the prior
VBmod.age1<-MCMCglmm(VB~moult, random=~BirdID+animal+Cohort+Observer+captureyear, 
                     pedigree=fixedped, data=VB.age1, 
                     thin=1000, burnin=10000, 
                     nitt=1000000, prior=VB.age1.prior, verbose=F) #run best age 1 VB model
save(VBmod.age1, file="VBmod.age1.Rdata") #save model
summary(VBmod.age1) #view model results
plot(VBmod.age1) #diagnostic plots
autocorr(VBmod.age1$VCV) #check autocorrelations
autocorr(VBmod.age1$Sol) #check autocorrelations
posterior.mode(VBmod.age1$VCV) #view posterior modes of variance components
HPDinterval(VBmod.age1$VCV) #view credible intervals
posterior.mode(VBmod.age1$Sol) #view posterior modes of fixed factors
HPDinterval(VBmod.age1$Sol) #view credible intervals
VBmod.age1.vp.full<-(VBmod.age1$VCV[, "animal"]
                     +VBmod.age1$VCV[, "BirdID"]
                     +VBmod.age1$VCV[, "Cohort"]
                     +VBmod.age1$VCV[, "units"]
                     +VBmod.age1$VCV[, "captureyear"]
                     +VBmod.age1$VCV[, "Observer"]) #find age 1 total Vp
posterior.mode(VBmod.age1.vp.full) #view total Vp
HPDinterval(VBmod.age1.vp.full) #view CIs
VBmod.age1.vp<-(VBmod.age1$VCV[, "animal"]
                +VBmod.age1$VCV[, "BirdID"]
                +VBmod.age1$VCV[, "Cohort"]
                +VBmod.age1$VCV[, "units"]) #find age 1 adjusted Vp for heritability estimate
posterior.mode(VBmod.age1.vp) #view age 1 adjusted Vp
HPDinterval(VBmod.age1.vp) #view CIs
VBmod.age1.h2<-VBmod.age1$VCV[, "animal"]/VBmod.age1.vp #find age 1 VB heritability
posterior.mode(VBmod.age1.h2) #view heritability
HPDinterval(VBmod.age1.h2) #view CIs
VBmod.age1.pe<-VBmod.age1$VCV[, "BirdID"]/VBmod.age1.vp #find age 1 VB repeatability
posterior.mode(VBmod.age1.pe) #view repeatability
HPDinterval(VBmod.age1.pe) #view CIs
VBmod.age1.by<-VBmod.age1$VCV[, "Cohort"]/VBmod.age1.vp #find age 1 VB cohort effects
posterior.mode(VBmod.age1.by) #view cohort effects
HPDinterval(VBmod.age1.by) #view CIs
VBmod.age1.r<-VBmod.age1$VCV[, "units"]/VBmod.age1.vp #find age 1 VB residual variance
posterior.mode(VBmod.age1.r) #view residual variance
HPDinterval(VBmod.age1.r) #view CIs

#age 2 VB model====
VB.age2.var<-var(VB.age2$VB) #find age 2 variance
VB.age2.prior <- list(G = list(G1 = list(V = (VB.age2.var/6), n = 1),
                               G2 = list(V = (VB.age2.var/6), n = 1),
                               G3 = list(V = (VB.age2.var/6), n = 1),
                               G4 = list(V = (VB.age2.var/6), n = 1),
                               R = list(V = (VB.age2.var/6), n = 1))) #set the prior
VBmod.age2<-MCMCglmm(VB~moult, random=~BirdID+animal+Cohort+Observer+captureyear, 
                     pedigree=fixedped, data=VB.age2, 
                     thin=1000, burnin=10000, 
                     nitt=1000000, prior=VB.age2.prior, verbose=F) #run best age 2 VB model
save(VBmod.age2, file="VBmod.age2.Rdata") #save model output
summary(VBmod.age2) #view model results
plot(VBmod.age2) #diagnostic plots
autocorr(VBmod.age2$VCV) #check autocorrelation
autocorr(VBmod.age2$Sol) #check autocorrelation
posterior.mode(VBmod.age2$VCV) #view posterior modes of variance components
HPDinterval(VBmod.age2$VCV) #view CIs
posterior.mode(VBmod.age2$Sol) #view posterior modes of fixed factors
HPDinterval(VBmod.age2$Sol) #view CIs
VBmod.age2.vp.full<-(VBmod.age2$VCV[, "animal"]
                     +VBmod.age2$VCV[, "BirdID"]
                     +VBmod.age2$VCV[, "Cohort"]
                     +VBmod.age2$VCV[, "units"]
                     +VBmod.age2$VCV[, "captureyear"]
                     +VBmod.age2$VCV[, "Observer"]) #find total Vp
posterior.mode(VBmod.age2.vp.full) #view total Vp
HPDinterval(VBmod.age2.vp.full) #view CIs
VBmod.age2.vp<-(VBmod.age2$VCV[, "animal"]
                +VBmod.age2$VCV[, "BirdID"]
                +VBmod.age2$VCV[, "Cohort"]
                +VBmod.age2$VCV[, "units"]) #find adjusted age 2 VB Vp for heritability estimate
posterior.mode(VBmod.age2.vp) #view adjusted Vp
HPDinterval(VBmod.age2.vp) #view CIs
VBmod.age2.h2<-VBmod.age2$VCV[, "animal"]/VBmod.age2.vp #find age 2 VB heritability
posterior.mode(VBmod.age2.h2) #view heritability
HPDinterval(VBmod.age2.h2) #view CIs
VBmod.age2.pe<-VBmod.age2$VCV[, "BirdID"]/VBmod.age2.vp #find age 2 VB repeatability
posterior.mode(VBmod.age2.pe) #view repeatability
HPDinterval(VBmod.age2.pe) #view CIs
VBmod.age2.by<-VBmod.age2$VCV[, "Cohort"]/VBmod.age2.vp #find age 2 VB cohort effects
posterior.mode(VBmod.age2.by) #view cohort effects
HPDinterval(VBmod.age2.by) #view CIs
VBmod.age2.r<-VBmod.age2$VCV[, "units"]/VBmod.age2.vp #find age 2 VB residual
posterior.mode(VBmod.age2.r) #view residual
HPDinterval(VBmod.age2.r) #view CIs

#age 3 VB model====
VB.age.var<-var(VB.age3$VB) #find age 3 variance
VB.age3.prior <- list(G = list(G1 = list(V = (VB.age3.var/6), n = 1),
                               G2 = list(V = (VB.age3.var/6), n = 1),
                               G3 = list(V = (VB.age3.var/6), n = 1),
                               G4 = list(V = (VB.age3.var/6), n = 1),
                               R = list(V = (VB.age3.var/6), n = 1))) #set the prior
VBmod.age3<-MCMCglmm(VB~moult, random=~BirdID+animal+Cohort+Observer+captureyear, 
                     pedigree=fixedped, data=VB.age3, 
                     thin=1000, burnin=10000, 
                     nitt=1000000, prior=VB.age3.prior, verbose=F) #run best age 3 VB model
save(VBmod.age3, file="VBmod.age3.Rdata") #save model output
summary(VBmod.age3) #view model results
plot(VBmod.age3) #diagnostic plots
autocorr(VBmod.age3$VCV) #check autocorrelation
autocorr(VBmod.age3$Sol) #check autocorrelation
posterior.mode(VBmod.age3$VCV) #view variance component posterior modes
HPDinterval(VBmod.age3$VCV) #view CIs
posterior.mode(VBmod.age3$Sol) #view fixed factor posterior modes
HPDinterval(VBmod.age3$Sol) #view CIs
VBmod.age3.vp.full<-(VBmod.age3$VCV[, "animal"]
                     +VBmod.age3$VCV[, "BirdID"]
                     +VBmod.age3$VCV[, "Cohort"]
                     +VBmod.age3$VCV[, "units"]
                     +VBmod.age3$VCV[, "captureyear"]
                     +VBmod.age3$VCV[, "Observer"]) #find full age 3 VB Vp
posterior.mode(VBmod.age3.vp.full) #view full Vp
HPDinterval(VBmod.age3.vp.full) #view CIs
VBmod.age3.vp<-(VBmod.age3$VCV[, "animal"]
                +VBmod.age3$VCV[, "BirdID"]
                +VBmod.age3$VCV[, "Cohort"]
                +VBmod.age3$VCV[, "units"]) #find adjusted age 3 VB Vp
posterior.mode(VBmod.age3.vp) #view adjusted Vp
HPDinterval(VBmod.age3.vp) #view CIs
VBmod.age3.h2<-VBmod.age3$VCV[, "animal"]/VBmod.age3.vp #find age 3 VB heritability
posterior.mode(VBmod.age3.h2) #view heritability
HPDinterval(VBmod.age3.h2) #view CIs
VBmod.age3.pe<-VBmod.age3$VCV[, "BirdID"]/VBmod.age3.vp #find age 3 VB repeatability
posterior.mode(VBmod.age3.pe) #view repeatability
HPDinterval(VBmod.age3.pe) #view CIs
VBmod.age3.by<-VBmod.age3$VCV[, "Cohort"]/VBmod.age3.vp #find age 3 VB cohort effects
posterior.mode(VBmod.age3.by) #view cohort effects
HPDinterval(VBmod.age3.by) #view CIs
VBmod.age3.r<-VBmod.age3$VCV[, "units"]/VBmod.age3.vp #find age 3 VB residual
posterior.mode(VBmod.age3.r) #view residual
HPDinterval(VBmod.age3.r) #view CIs

#age 4-8 VB model====
VB.age4to8.var<-var(VB.age4to8$VB) #find age 4-8 variance
VB.age4to8.prior<- list(G = list(G1 = list(V = (VB.age4to8.var/6), n = 1),
                                 G2 = list(V = (VB.age4to8.var/6), n = 1),
                                 G3 = list(V = (VB.age4to8.var/6), n = 1),
                                 G4 = list(V = (VB.age4to8.var/6), n = 1),
                                 R = list(V = (VB.age4to8.var/6), n = 1))) #set the prior
VBmod.age4to8<-MCMCglmm(VB~moult+age, random=~BirdID+animal+Cohort+Observer+captureyear, 
                        pedigree=fixedped, data=VB.age4to8, thin=1000, burnin=10000, 
                        nitt=1000000, prior=VB.age4to8.prior, verbose=F) #best age 4-8 VB model; include age to prevent heritability inflation and improve DIC!
save(VBmod.age4to8, file="VBmod.age4to8.Rdata") #save model output
summary(VBmod.age4to8) #view model results
plot(VBmod.age4to8) #diagnostic plots
autocorr(VBmod.age4to8$VCV) #check autocorrelation
autocorr(VBmod.age4to8$Sol) #check autocorrelation
posterior.mode(VBmod.age4to8$VCV) #view posterior modes of variance components
HPDinterval(VBmod.age4to8$VCV) #view CIs
posterior.mode(VBmod.age4to8$Sol) #view posterior modes of fixed factors
HPDinterval(VBmod.age4to8$Sol) #view CIs
VBmod.age4to8.vp.full<-(VBmod.age4to8$VCV[, "animal"]
                        +VBmod.age4to8$VCV[, "BirdID"]
                        +VBmod.age4to8$VCV[, "Cohort"]
                        +VBmod.age4to8$VCV[, "units"]
                        +VBmod.age4to8$VCV[, "captureyear"]
                        +VBmod.age4to8$VCV[, "Observer"]) #find full age 4-8 VB Vp
posterior.mode(VBmod.age4to8.vp.full) #view full Vp
HPDinterval(VBmod.age4to8.vp.full) #view CIs
VBmod.age4to8.vp<-(VBmod.age4to8$VCV[, "animal"]
                   +VBmod.age4to8$VCV[, "BirdID"]
                   +VBmod.age4to8$VCV[, "Cohort"]
                   +VBmod.age4to8$VCV[, "units"]) #find adjusted age 4-8 VB Vp
posterior.mode(VBmod.age4to8.vp) #view adjusted Vp
HPDinterval(VBmod.age4to8.vp) #view CIs
VBmod.age4to8.h2<-VBmod.age4to8$VCV[, "animal"]/VBmod.age4to8.vp #find age 4-8 VB heritability
posterior.mode(VBmod.age4to8.h2) #view heritability
HPDinterval(VBmod.age4to8.h2) #view CIs
VBmod.age4to8.pe<-VBmod.age4to8$VCV[, "BirdID"]/VBmod.age4to8.vp #find age 4-8 VB repeatability
posterior.mode(VBmod.age4to8.pe) #view repeatability
HPDinterval(VBmod.age4to8.pe) #view CIs
VBmod.age4to8.by<-VBmod.age4to8$VCV[, "Cohort"]/VBmod.age4to8.vp #find age 4-8 VB cohort effects
posterior.mode(VBmod.age4to8.by) #view cohort effects
HPDinterval(VBmod.age4to8.by) #view CIs
VBmod.age4to8.r<-VBmod.age4to8$VCV[, "units"]/VBmod.age4to8.vp #find age 4-8 VB residual effects
posterior.mode(VBmod.age4to8.r) #view residual effects
HPDinterval(VBmod.age4to8.r) #view CIs

#VB heritability plot====
Age<-c(1, 2, 3, "4 to 8") #create vector of ages for labelling
age1<-c(posterior.mode(VBmod.age1.h2), HPDinterval(VBmod.age1.h2)[1], HPDinterval(VBmod.age1.h2)[2]) #join age 1 heritability with CIs
age2<-c(posterior.mode(VBmod.age2.h2), HPDinterval(VBmod.age2.h2)[1], HPDinterval(VBmod.age2.h2)[2]) #join age 2 heritability with CIs
age3<-c(posterior.mode(VBmod.age3.h2), HPDinterval(VBmod.age3.h2)[1], HPDinterval(VBmod.age3.h2)[2]) #join age 3 heritability with CIs
age4to8<-c(posterior.mode(VBmod.age4to8.h2), HPDinterval(VBmod.age4to8.h2)[1], HPDinterval(VBmod.age4to8.h2)[2]) #join age 4-8 heritability with CIs
VBh2.byage<-as.data.frame(rbind(age1, age2, age3, age4to8), header=TRUE) #join heritability data for all ages as a df
VBh2.byage$age<-Age #add ages to df
VBh2.byage$Variance<-as.numeric(as.character(VBh2.byage$var1)) #make variance numeric
VBh2.byage$Lower<-as.numeric(as.character(VBh2.byage$V2)) #make CIs numeric
VBh2.byage$Upper<-as.numeric(as.character(VBh2.byage$V3)) #make CIs numeric

#create graph showing VB heritability estimates by age and their credibility intervals
png(filename="VB.h2.byage.png", width=500, height=400, units="px")
ggplot(VBh2.byage, aes(x=age, y=Variance, group=1, fill=age)) +
  geom_bar(stat="identity", color="black", position=position_dodge())+
  theme_classic() +
  geom_errorbar(size=0.4, width=0.06, aes(ymin=VBh2.byage$Lower, ymax=VBh2.byage$Upper), colour="black") +
  xlab("Age") +
  ylab("Visible Badge Heritability")+
  scale_fill_manual(values=rep("grey", 4))+
  theme(legend.position = "none", axis.text=element_text(size=16), 
        axis.title=element_text(size=16)) +
  scale_y_continuous(expand=c(0,0))
dev.off()

# VB evolvability by age (mean-standardised)====
VB.I.age1<-posterior.mode(VBmod.age1$VCV[,"animal"])/(mean(VB.age1$VB)*mean(VB.age1$VB)) #age 1
VB.I.age2<-posterior.mode(VBmod.age2$VCV[,"animal"])/(mean(VB.age2$VB)*mean(VB.age2$VB)) #age 2
VB.I.age3<-posterior.mode(VBmod.age3$VCV[,"animal"])/(mean(VB.age3$VB)*mean(VB.age3$VB)) #age 3
VB.I.age4to8<-posterior.mode(VBmod.age4to8$VCV[,"animal"])/(mean(VB.age4to8$VB)*mean(VB.age4to8$VB)) #age 4-8
VB.I<-c(VB.I.age1, VB.I.age2, VB.I.age3, VB.I.age4to8) #join VB evolvability estimates of VB
Age<-c(1, 2, 3, "4 to 8") #join ages as sequence
VB.I.byage<-cbind(Age, VB.I) #join the ages and estimates
VB.I.byage<-as.data.frame(VB.I.byage) #make them a dataframe
VB.I.byage$Age<-as.factor(VB.I.byage$Age) #factorise age
VB.I.byage$VB.I<-as.numeric(as.character(VB.I.byage$VB.I)) #make estimates numeric
VB.I.byage$VB.I<-VB.I.byage$VB.I*100 #times estimates by 100 to give total evolvability of VB

#plot evolvability by age of VB size
png(filename="VB.I.byage.png", width=500, height=400, units="px") #save plot as png
ggplot(VB.I.byage, aes(x=Age, y=VB.I, group=1, fill=Age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("grey12", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("Visible Badge Evolvability")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16)) #plot bar chart of VB sample size by age
dev.off()

#HIDDEN BADGE====
#import and inspect hidden badge data
HB<-read.table("HB.txt", header=T)
head(HB)
str(HB)

#visualise data
boxplot(HB$HB~HB$age) #view HB by age - seems to be a general increase
boxplot(HB$HB~HB$Observer) #investigate AS further
boxplot(HB$HB~HB$captureyear) #increasing since around 2008
boxplot(HB$HB~HB$Cohort) #fairly consistent - increasing sligtly since 2008
boxplot(HB$HB~HB$moult) #seem the same

#check difference between AS and overall mean
t.test(HB$HB[HB$Observer=="AS"], HB$HB)#very different
AS<-length(HB$BirdID[HB$Observer=="AS"]) #find total number of HB observations of 'AS' 
ALL<-length(HB$BirdID) #find total number of HB observations 
(AS/ALL)*100 #find the percentage of all HB observations taken by AS
HB<-subset(HB, Observer!="AS") #remove observer from data

#find total number of birds measured and the repeated measures
length(unique(HB$BirdID)) #find total individuals measured
HB.repeats<-HB%>%group_by(BirdID)%>%summarise(n=length(HB)) #create df of no. measurements taken of each bird
HB.repeats%>%group_by(n)%>%summarise(length(BirdID)) #find how many birds were subject to each number of repeated measurements
length(HB$BirdID) #find total observations 


#statisical summaries - mean, variance and range
mean(HB$HB)
var(HB$HB)
range(HB$HB)
hist(HB$HB) #check HB distribution

#age-corr HB====
HB.var<-var(HB$HB)  #assign variance to a name to use as start point for the model              
HBprior <- list(G = list(G1 = list(V = (HB.var/6), n = 1),
                         G2 = list(V = (HB.var/6), n = 1),
                         G3 = list(V = (HB.var/6), n = 1),
                         G4 = list(V = (HB.var/6), n = 1),
                         R = list(V = (HB.var/6), n = 1))) #6 random effects
HBmod.agecorr<-MCMCglmm(HB~age+moult, random=~BirdID+animal+Cohort+captureyear
                        +Observer,prior=HBprior, pedigree=fixedped, data=HB, 
                        thin=1000, burnin=10000, nitt=1000000, verbose=F) #run age-corr HB model
save(HBmod.agecorr, file="HBmod.agecorr.Rdata") #save model output
summary(HBmod.agecorr) #view model results
plot(HBmod.agecorr) #diagnostic plots
autocorr(HBmod.agecorr$VCV) #check autocorrelations
autocorr(HBmod.agecorr$Sol) #check autocorrelations
posterior.mode(HBmod.agecorr$VCV)
HPDinterval(HBmod.agecorr$VCV)
posterior.mode(HBmod.agecorr$Sol)
HPDinterval(HBmod.agecorr$Sol)
HBmod.agecorr.vp.full<-(HBmod.agecorr$VCV[,"BirdID"]
                        +HBmod.agecorr$VCV[,"animal"]
                        +HBmod.agecorr$VCV[,"units"]
                        +HBmod.agecorr$VCV[,"Cohort"]
                        +HBmod.agecorr$VCV[,"captureyear"]
                        +HBmod.agecorr$VCV[,"Observer"]) #find total phenotypic variance
posterior.mode(HBmod.agecorr.vp.full) #view full Vp
HPDinterval(HBmod.agecorr.vp.full) #view CIs
HBmod.agecorr.vp<-(HBmod.agecorr$VCV[,"BirdID"]
                   +HBmod.agecorr$VCV[,"animal"]
                   +HBmod.agecorr$VCV[,"units"]
                   +HBmod.agecorr$VCV[,"Cohort"]) #find adjusted total phenotypic variance for h2 estimation
posterior.mode(HBmod.agecorr.vp) #view adjusted vp
HPDinterval(HBmod.agecorr.vp) #view CIs
HBmod.agecorr.h2<-HBmod.agecorr$VCV[,"animal"]/HBmod.agecorr.vp #find HB heritability
posterior.mode(HBmod.agecorr.h2) #view heritability
HPDinterval(HBmod.agecorr.h2) #view CIs
HBmod.agecorr.pe<-HBmod.agecorr$VCV[,"BirdID"]/HBmod.agecorr.vp #find permanent environment effects
posterior.mode(HBmod.agecorr.pe) #view PE
HPDinterval(HBmod.agecorr.pe) #view CIs
HBmod.agecorr.by<-HBmod.agecorr$VCV[,"Cohort"]/HBmod.agecorr.vp #find cohort effects
posterior.mode(HBmod.agecorr.by) #view cohort variance
HPDinterval(HBmod.agecorr.by) #view CIs
HBmod.agecorr.r<-HBmod.agecorr$VCV[,"units"]/HBmod.agecorr.vp #estimate residual variance
posterior.mode(HBmod.agecorr.r) #view residual variance 
HPDinterval(HBmod.agecorr.r) #view CIs

#find HB age-corrected evolvability (mean-standardised)
posterior.mode(HBmod.agecorr$VCV[,"animal"])/(mean(HB$HB)*mean(HB$HB))

#HB by age====
HB.ages <- split( HB , f = HB$age )#split dataset into a list of dataframes of each age
for (i in 1:length(HB.ages)) {
  assign(paste0("HB.age", i), as.data.frame(HB.ages[[i]]))
} #change list of dataframes to separate dataframes for each age

#find means and sample sizes for HB measures by age
HB.summstats<-HB%>%group_by(age)%>%summarise(HB=mean(HB), n=length(unique(BirdID))) #create df of summary statistics
View(HB.summstats) #check dataframe
#group birds age 4 to 8 due to low numbers 
HB.age4to8 <- rbind(HB.age4, HB.age5, HB.age6, HB.age7, HB.age8) #create df with all age 4-8 because of the small sample sizes
length(HB.age4to8$BirdID) #count number of observations
length(unique(HB.age4to8$BirdID)) #count - 73 individual birds included
mean(HB.age4to8$HB) #age 4-8 HB mean
var(HB.age4to8$HB) #age 4-8 HB variance
range(HB.age4to8$HB) #age 4-8 HB range

#create bar chart of HB sample sizes by age
HB.summstats<-rbind(HB.summstats, c("4 to 8", NA, 73)) #add new group sample size to summary stats df
HB.summstats<-HB.summstats[-c(4:8), ] #remove all individual sample sizes of the newly merged ages
HB.summstats$n<-as.numeric(as.character(HB.summstats$n)) #make variable numeric
HB.summstats$age<-as.factor(HB.summstats$age) #make age grouping factor for plotting

png(filename="MA.n.byage.png", width=500, height=400, units="px") #save as png
ggplot(HB.summstats, aes(x=age, y=n, group=1, fill=age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("grey78", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("n")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16))#plot bar chart 
dev.off()

#show distributions for HB size of each age groups
par(mfrow=c(2,2)) #set display so all 4 plots shown together
hist(HB.age1$HB)
hist(HB.age2$HB)
hist(HB.age3$HB)
hist(HB.age4to8$HB) #all look nice and normal

#age 1 HB model====
HB.age1.var<-var(HB.age1$HB)  #assign variance to a name to use as start point for the model              
HB.prior.age1 <- list(G = list(G1 = list(V = (HB.age1.var/7), n = 1), 
                               G2 = list(V = (HB.age1.var/7), n = 1), 
                               G3 = list(V = (HB.age1.var/7), n = 1), 
                               G4 = list(V = (HB.age1.var/7), n = 1), 
                               G5 = list(V = (HB.age1.var/7), n = 1),
                               R = list(V = (HB.age1.var/7), n = 1))) #set the prior
HBmod.age1<-MCMCglmm(HB~1, random=~BirdID+animal+Cohort+Observer
                     +SocialBroodID+captureyear,pedigree=fixedped, 
                     data=HB.age1, prior=HB.prior.age1, thin=1000, 
                     burnin=10000, nitt=1000000, verbose=F) #run best HB age 1 model
save(HBmod.age1, file="HBmod.age1.Rdata") #save model
summary(HBmod.age1) #view model results
plot(HBmod.age1) #diagnostic plots
autocorr(HBmod.age1$VCV) #check autocorrelations
autocorr(HBmod.age1$Sol) #check autocorrelations
posterior.mode(HBmod.age1$VCV) #view var. components posterior modes
HPDinterval(HBmod.age1$VCV) #view CIs
posterior.mode(HBmod.age1$Sol) #view fixed factor posterior modes
HPDinterval(HBmod.age1$Sol) #view CIs
HB.age1.vp.full<-(HBmod.age1$VCV[, "animal"]
                  +HBmod.age1$VCV[, "BirdID"]
                  +HBmod.age1$VCV[, "Cohort"]
                  +HBmod.age1$VCV[, "SocialBroodID"]
                  +HBmod.age1$VCV[, "units"]
                  +HBmod.age1$VCV[, "captureyear"]
                  +HBmod.age1$VCV[, "Observer"]) #find age 1 HB total phenotypic variance
posterior.mode(HB.age1.vp.full) #view full Vp
HPDinterval(HB.age1.vp.full) #view CIs
HB.age1.vp<-(HBmod.age1$VCV[, "animal"]
             +HBmod.age1$VCV[, "BirdID"]
             +HBmod.age1$VCV[, "Cohort"]
             +HBmod.age1$VCV[, "SocialBroodID"]
             +HBmod.age1$VCV[, "units"]) #find adjusted total phenotypic variance for h2 estimate
posterior.mode(HB.age1.vp) 
HPDinterval(HB.age1.vp)
HB.age1.h2<-HBmod.age1$VCV[, "animal"]/HB.age1.vp #find age 1 HB heritability
posterior.mode(HB.age1.h2) #view heritability
HPDinterval(HB.age1.h2) #view CIs
HB.age1.pe<-HBmod.age1$VCV[, "BirdID"]/HB.age1.vp #find age 1 HB repeatability
posterior.mode(HB.age1.pe) #view repeatability
HPDinterval(HB.age1.pe) #view CIs
HB.age1.by<-HBmod.age1$VCV[, "Cohort"]/HB.age1.vp #find age 1 HB cohort effects
posterior.mode(HB.age1.by) #view cohort effects
HPDinterval(HB.age1.by) #view CIs
HB.age1.ce<-HBmod.age1$VCV[, "SocialBroodID"]/HB.age1.vp #find age 1 HB social brood effects
posterior.mode(HB.age1.ce) #view social brood effects
HPDinterval(HB.age1.ce) #view CIs
HB.age1.r<-HBmod.age1$VCV[, "units"]/HB.age1.vp #find age 1 HB residual
posterior.mode(HB.age1.r) #view residual
HPDinterval(HB.age1.r) #view CIs

#age 2 HB model====
HB.age2.var<-var(HB.age2$HB)  #assign variance to a name to use as start point for the model              
HB.prior.age2 <- list(G = list(G1 = list(V = (HB.age2.var/7), n = 1), 
                               G2 = list(V = (HB.age2.var/7), n = 1), 
                               G3 = list(V = (HB.age2.var/7), n = 1), 
                               G4 = list(V = (HB.age2.var/7), n = 1), 
                               G5 = list(V = (HB.age2.var/7), n = 1),
                               R = list(V = (HB.age2.var/7), n = 1))) #set the prior
HBmod.age2<-MCMCglmm(HB~1, random=~BirdID+animal+Cohort+Observer
                     +SocialBroodID+captureyear,pedigree=fixedped, 
                     data=HB.age2, prior=HB.prior.age2, thin=1000, 
                     burnin=10000, nitt=1000000, verbose=F) #run best age 2 HB model
save(HBmod.age2, file="HBmod.age2.Rdata") #save model
summary(HBmod.age2) #view model results
plot(HBmod.age2) #diagnostic plots
autocorr(HBmod.age2$VCV) #check autocorrelations
autocorr(HBmod.age2$Sol) #check autocorrelations
posterior.mode(HBmod.age2$VCV)
HPDinterval(HBmod.age2$VCV)
posterior.mode(HBmod.age2$Sol)
HPDinterval(HBmod.age2$Sol)
HB.age2.vp.full<-(HBmod.age2$VCV[, "animal"] 
                  +HBmod.age2$VCV[, "BirdID"]
                  +HBmod.age2$VCV[, "Cohort"]
                  +HBmod.age2$VCV[, "SocialBroodID"]
                  +HBmod.age2$VCV[, "units"]
                  +HBmod.age2$VCV[, "captureyear"]
                  +HBmod.age2$VCV[, "Observer"]) #find ful; age 2 HB total phenotypic variance 
posterior.mode(HB.age2.vp.full)
HPDinterval(HB.age2.vp.full)
HB.age2.vp<-(HBmod.age2$VCV[, "animal"] 
             +HBmod.age2$VCV[, "BirdID"]
             +HBmod.age2$VCV[, "Cohort"]
             +HBmod.age2$VCV[, "SocialBroodID"]
             +HBmod.age2$VCV[, "units"]) #find total age 2 HB phenotypic variance 
posterior.mode(HB.age2.vp)
HPDinterval(HB.age2.vp)
HBmod.age2.h2<-HBmod.age2$VCV[, "animal"]/HB.age2.vp #find age 2 HB heritability
posterior.mode(HBmod.age2.h2) #view heritability
HPDinterval(HBmod.age2.h2) #view CIs
HBmod.age2.pe<-HBmod.age2$VCV[, "BirdID"]/HB.age2.vp #find age 2 HB repeatability
posterior.mode(HBmod.age2.pe) #view repeatability
HPDinterval(HBmod.age2.pe) #view CIs
HBmod.age2.by<-HBmod.age2$VCV[, "Cohort"]/HB.age2.vp #find age 2 HB cohort effects
posterior.mode(HBmod.age2.by) #view cohort effects
HPDinterval(HBmod.age2.by) #view CIs
HBmod.age2.ce<-HBmod.age2$VCV[, "SocialBroodID"]/HB.age2.vp #find age 2 HB social brood effects
posterior.mode(HBmod.age2.ce) #view social brood effects
HPDinterval(HBmod.age2.ce) #view CIs
HBmod.age2.r<-HBmod.age2$VCV[, "units"]/HB.age2.vp #find age 2 HB residual
posterior.mode(HBmod.age2.r) #view residual
HPDinterval(HBmod.age2.r) #view CIs

#age 3 HB model====
HB.age3.var<-var(HB.age3$HB)  #assign variance to a name to use as start point for the model              
HB.prior.age3 <- list(G = list(G1 = list(V = (HB.age3.var/7), n = 1), 
                               G2 = list(V = (HB.age3.var/7), n = 1), 
                               G3 = list(V = (HB.age3.var/7), n = 1), 
                               G4 = list(V = (HB.age3.var/7), n = 1), 
                               G5 = list(V = (HB.age3.var/7), n = 1), 
                               R = list(V = (HB.age3.var/7), n = 1))) #set prior 
HBmod.age3<-MCMCglmm(HB~1, random=~BirdID+animal+Cohort+Observer
                     +SocialBroodID+captureyear, pedigree=fixedped, 
                     data=HB.age3, prior=HB.prior.age3, thin=1000, 
                     burnin=10000, nitt=1000000, verbose=F) #run best age 3 HB model
save(HBmod.age3, file="HBmod.age3.Rdata") #save model
summary(HBmod.age3) #view model results
plot(HBmod.age3) #diagnostic plots
autocorr(HBmod.age3$VCV) #check autocorrelations 
autocorr(HBmod.age3$Sol) #check autocorrelations
posterior.mode(HBmod.age3$VCV)
HPDinterval(HBmod.age3$VCV)
posterior.mode(HBmod.age3$Sol)
HPDinterval(HBmod.age3$Sol)
HB.age3.vp.full<-(HBmod.age3$VCV[, "animal"]
                  +HBmod.age3$VCV[, "BirdID"]
                  +HBmod.age3$VCV[, "Cohort"]
                  +HBmod.age3$VCV[, "SocialBroodID"]
                  +HBmod.age3$VCV[, "units"]
                  +HBmod.age3$VCV[, "captureyear"]
                  +HBmod.age3$VCV[, "Observer"]) #find full total phenotypic variance for age 3 HB
posterior.mode(HB.age3.vp.full) #view total Vp
HPDinterval(HB.age3.vp.full) #view CIs
HB.age3.vp<-(HBmod.age3$VCV[, "animal"]
             +HBmod.age3$VCV[, "BirdID"]
             +HBmod.age3$VCV[, "Cohort"]
             +HBmod.age3$VCV[, "SocialBroodID"]
             +HBmod.age3$VCV[, "units"]) #find adjusted age 3 HB phenotypic variance
posterior.mode(HB.age3.vp) #view adjusted Vp
HPDinterval(HB.age3.vp) #view CIs
HBmod.age3.h2<-HBmod.age3$VCV[, "animal"]/HB.age3.vp #age 3 HB heritability
posterior.mode(HBmod.age3.h2) #view heritability
HPDinterval(HBmod.age3.h2) #view CIs
HBmod.age3.pe<-HBmod.age3$VCV[, "BirdID"]/HB.age3.vp #age 3 HB repeatbility
posterior.mode(HBmod.age3.pe) #view heritability
HPDinterval(HBmod.age3.pe) #view CIs
HBmod.age3.by<-HBmod.age3$VCV[, "Cohort"]/HB.age3.vp #age 3 HB birth year effects
posterior.mode(HBmod.age3.by) #view heritability
HPDinterval(HBmod.age3.by) #view CIs
HBmod.age3.ce<-HBmod.age3$VCV[, "SocialBroodID"]/HB.age3.vp #age 3 HB social brood effects
posterior.mode(HBmod.age3.ce) #view heritability
HPDinterval(HBmod.age3.ce) #view CIs
HBmod.age3.me<-HBmod.age3$VCV[, "dam"]/HB.age3.vp #age 3 HB maternal effects
posterior.mode(HBmod.age3.me) #view heritability
HPDinterval(HBmod.age3.me) #view CIs
HBmod.age3.r<-HBmod.age3$VCV[, "units"]/HB.age3.vp #age 3 HB residual variance
posterior.mode(HBmod.age3.r) #view heritability
HPDinterval(HBmod.age3.r) #view CIs

#age 4-8 HB model====
HB.age4to8.var<-var(HB.age4to8$HB)  #assign variance to a name to use as start point for the model              
HB.prior.age4to8 <- list(G = list(G1 = list(V = (HB.age4to8.var/7), n = 1), 
                                  G2 = list(V = (HB.age4to8.var/7), n = 1), 
                                  G3 = list(V = (HB.age4to8.var/7), n = 1), 
                                  G4 = list(V = (HB.age4to8.var/7), n = 1), 
                                  G5 = list(V = (HB.age4to8.var/7), n = 1),
                                  R = list(V = (HB.age4to8.var/7), n = 1)))
HBmod.age4to8<-MCMCglmm(HB~1, random=~BirdID+animal+Cohort+Observer
                        +SocialBroodID+captureyear,pedigree=fixedped, 
                        data=HB.age4to8, prior=HB.prior.age4to8, thin=1000, 
                        burnin=10000, nitt=1000000, verbose=F) #run best age 4-8 HB model
save(HBmod.age4to8, file="HBmod.age4to8.Rdata") #save model
summary(HBmod.age4to8) #view model results
plot(HBmod.age4to8) #diagnostic plots
autocorr(HBmod.age4to8$VCV) #check autocorrelation
autocorr(HBmod.age4to8$Sol) #check autocorrelation
posterior.mode(HBmod.age4to8$VCV)
HPDinterval(HBmod.age4to8$VCV)
posterior.mode(HBmod.age4to8$Sol)
HPDinterval(HBmod.age4to8$Sol)
HB.age4to8.vp.full<-(HBmod.age4to8$VCV[, "animal"]
                     +HBmod.age4to8$VCV[, "BirdID"]
                     +HBmod.age4to8$VCV[, "Cohort"]
                     +HBmod.age4to8$VCV[, "SocialBroodID"]
                     +HBmod.age4to8$VCV[, "units"]
                     +HBmod.age4to8$VCV[, "captureyear"]
                     +HBmod.age4to8$VCV[, "Observer"]) #find full total age 4-8 HB phenotypic variance
posterior.mode(HB.age4to8.vp.full)
HPDinterval(HB.age4to8.vp.full)
HB.age4to8.vp<-(HBmod.age4to8$VCV[, "animal"]
                +HBmod.age4to8$VCV[, "BirdID"]
                +HBmod.age4to8$VCV[, "Cohort"]
                +HBmod.age4to8$VCV[, "SocialBroodID"]
                +HBmod.age4to8$VCV[, "units"]) #find adjusted age 4-8 HB Vp
posterior.mode(HB.age4to8.vp)
HPDinterval(HB.age4to8.vp)
HBmod.age4to8.h2<-HBmod.age4to8$VCV[, "animal"]/HB.age4to8.vp #find age 4-8 HB heritability
posterior.mode(HBmod.age4to8.h2) #view heritability
HPDinterval(HBmod.age4to8.h2) #view CIs
HBmod.age4to8.pe<-HBmod.age4to8$VCV[, "BirdID"]/HB.age4to8.vp #find age 4-8 HB repeatability
posterior.mode(HBmod.age4to8.pe) #view repeatability
HPDinterval(HBmod.age4to8.pe) #view CIs
HBmod.age4to8.by<-HBmod.age4to8$VCV[, "Cohort"]/HB.age4to8.vp #find age 4-8 HB cohort effects
posterior.mode(HBmod.age4to8.by) #view cohort effects
HPDinterval(HBmod.age4to8.by) #view CIs
HBmod.age4to8.ce<-HBmod.age4to8$VCV[, "SocialBroodID"]/HB.age4to8.vp #find age 4-8 HB social brood effects
posterior.mode(HBmod.age4to8.ce) #view social brood effects
HPDinterval(HBmod.age4to8.ce) #view CIs
HBmod.age4to8.r<-HBmod.age4to8$VCV[, "units"]/HB.age4to8.vp #find age 4-8 HB residual
posterior.mode(HBmod.age4to8.r) #view residual
HPDinterval(HBmod.age4to8.r) #view CIs

#HB heritability plot====
Age<-c(1, 2, 3, "4 to 8") #make vector of ages
age1<-c(posterior.mode(HB.age1.h2), HPDinterval(HB.age1.h2)[1], HPDinterval(HB.age1.h2)[2]) #join age 1 values
age2<-c(posterior.mode(HBmod.age2.h2), HPDinterval(HBmod.age2.h2)[1], HPDinterval(HBmod.age2.h2)[2]) #join age 2 values
age3<-c(posterior.mode(HBmod.age3.h2), HPDinterval(HBmod.age3.h2)[1], HPDinterval(HBmod.age3.h2)[2]) #join age 3 values
age4to8<-c(posterior.mode(HBmod.age4to8.h2), HPDinterval(HBmod.age4to8.h2)[1], HPDinterval(HBmod.age4to8.h2)[2]) #join age 4-8 values
HBh2.byage<-as.data.frame(rbind(age1, age2, age3, age4to8), header=TRUE) #form df with all ages heritabilities and CIs
HBh2.byage$age<-Age #add age for labels
HBh2.byage$Variance<-as.numeric(as.character(HBh2.byage$var1)) #make variable numeric
HBh2.byage$Lower<-as.numeric(as.character(HBh2.byage$V2)) #make variable numeric
HBh2.byage$Upper<-as.numeric(as.character(HBh2.byage$V3)) #make variable numeric

#create graph showing HB heritability estimates by age and their credibility intervals
png(filename="HB.h2.byage.png", width=500, height=400, units="px")
ggplot(HBh2.byage, aes(x=age, y=Variance, group=1, fill=age)) +
  geom_bar(stat="identity", color="black", position=position_dodge())+
  geom_errorbar(size=0.4, width=0.06, aes(ymin=HBh2.byage$Lower, ymax=HBh2.byage$Upper), colour="black") +
  theme_classic() +
  xlab("Age") +
  ylab("Hidden Badge Heritability")+
  scale_fill_manual(values=rep("grey",4))+
  scale_y_continuous(expand=c(0,0)) +
  theme(legend.position = "none", 
        axis.text=element_text(size=16), axis.title=element_text(size=16)) 
dev.off() 

#HB evolvability plot (mean-standardised)====
HB.I.age1<-posterior.mode(HBmod.age1$VCV[,"animal"])/(mean(HB.age1$HB)*mean(HB.age1$HB)) #age 1
HB.I.age2<-posterior.mode(HBmod.age2$VCV[,"animal"])/(mean(HB.age2$HB)*mean(HB.age2$HB)) #age 2
HB.I.age3<-posterior.mode(HBmod.age3$VCV[,"animal"])/(mean(HB.age3$HB)*mean(HB.age3$HB)) #age 3
HB.I.age4to8<-posterior.mode(HBmod.age4to8$VCV[,"animal"])/(mean(HB.age4to8$HB)*mean(HB.age4to8$HB)) #age 4-8
HB.I<-c(HB.I.age1, HB.I.age2, HB.I.age3, HB.I.age4to8)
Age<-c(1, 2, 3, "4 to 8")
HB.I.byage<-cbind(Age, HB.I)
HB.I.byage<-as.data.frame(HB.I.byage) #create evolvability dataframe
HB.I.byage$Age<-as.factor(HB.I.byage$Age)
HB.I.byage$HB.I<-as.numeric(as.character(HB.I.byage$HB.I))
HB.I.byage$HB.I<-HB.I.byage$HB.I*100

#plot evolvability by age of HB size
png(filename="HB.I.byage.png", width=500, height=400, units="px") #save plot as png
ggplot(HB.I.byage, aes(x=Age, y=HB.I, group=1, fill=Age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("grey12", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("Hidden Badge Evolvability")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16)) #plot bar chart of HB sample size by age
dev.off()

#MASK====
MA<-read.table("MA.txt", header=TRUE) #import mask size dataset
str(MA) #check mask dataset
head(MA) #check mask dataset
hist(MA$MA) #check mask size distribution
length(unique(MA$BirdID)) #find total no. birds measured for mask
MA.repeats<-MA%>%group_by(BirdID)%>%summarise(n=length(MA)) #create df of no. measurements taken of each bird
MA.repeats%>%group_by(n)%>%summarise(length(BirdID)) #find how many birds were subject to each number of repeated measurements
length(MA$BirdID) #find total no. observations for mask

#summary of mask
mean(MA$MA)
range(MA$MA)
var(MA$MA)

#visualise data
boxplot(MA$MA~MA$Observer) #no differences
boxplot(MA$MA~MA$captureyear) #seems pretty consistent
boxplot(MA$MA~MA$Cohort) #seems to dip around 2007 but no strong trends
boxplot(MA$MA~MA$moult) #no difference

#find mask change with age 
MA$age<-as.factor(MA$age) #make age a grouping factor
boxplot(MA$MA~MA$age) #view mask size by age
MA.aov.age<-aov(MA~age, data=MA) #ANOVA to test differences between ages
summary(MA.aov.age) #view ANOVA results
TukeyHSD(MA.aov.age) #carry out Tukey to see pairwise differences 

#test differences between yearlings and the rest to replicate results from Mask of Seniority paper
MA$yearling<-ifelse(MA$age==1, "Yearling", "Older") #create variable to identify one year olds
MA$yearling<-factor(MA$yearling, levels=c("Yearling", "Older")) #order names in yearling variable to prevent plotting alphabetically
png(filename="mask.byage.png", height=500, width=500) #open png file in wd to save boxplot
boxplot(MA$MA~MA$yearling, ylab="Mask Size (mm)", xlab="Age", 
        col="gray", cex.lab=1.6, cex.axis=1.4) #view difference between yearlings and older birds
dev.off() #close png file
t.test(MA$MA~MA$yearling) #find significance in mask change size from yearling

#age-corr mask====
#make the prior for the animal model
MA.var<-var(MA$MA)  #assign variance to a name to use as start point for the model              
prior1 <- list(G = list(G1 = list(V = (MA.var/6), n = 1), 
                        G2 = list(V = (MA.var/6), n = 1), 
                        G3 = list(V = (MA.var/6), n = 1),
                        G4 = list(V = (MA.var/6), n = 1),
                        R = list(V = (MA.var/6), n = 1))) #set the prior
MAmod.agecorr<-MCMCglmm(MA~age+moult, random=~BirdID+animal+captureyear+Observer
                        +Cohort, prior=prior1, pedigree=fixedped, data=MA, 
                        thin=1000, burnin=10000, nitt=1000000, verbose=F) #run the model to find age-corr heritability of mask size
save(MAmod.agecorr, file="MAmod.agecorr.Rdata") #save the model to the working directory
summary(MAmod.agecorr) #view model results
plot(MAmod.agecorr) #view diagnostic plots
autocorr(MAmod.agecorr$VCV) #check autocorrelations
autocorr(MAmod.agecorr$Sol) #check autocorrelations
posterior.mode(MAmod.agecorr$VCV)
HPDinterval(MAmod.agecorr$VCV)
posterior.mode(MAmod.agecorr$Sol)
HPDinterval(MAmod.agecorr$Sol)
MAmod.agecorr.vp.full<-(MAmod.agecorr$VCV[, "animal"]
                        +MAmod.agecorr$VCV[, "units"]
                        +MAmod.agecorr$VCV[, "BirdID"]
                        +MAmod.agecorr$VCV[, "Cohort"]
                        +MAmod.agecorr$VCV[, "captureyear"]
                        +MAmod.agecorr$VCV[, "Observer"]) #find the full total phenotypic variance
posterior.mode(MAmod.agecorr.vp.full)
HPDinterval(MAmod.agecorr.vp.full)
MAmod.agecorr.vp<-(MAmod.agecorr$VCV[, "animal"]
                   +MAmod.agecorr$VCV[, "units"]
                   +MAmod.agecorr$VCV[, "BirdID"]
                   +MAmod.agecorr$VCV[, "Cohort"]) #find the adjusted MA total phenotypic variance for heritability estimation
posterior.mode(MAmod.agecorr.vp) #view the total phenotypic variance
HPDinterval(MAmod.agecorr.vp) #view the credibility intervals
MAmod.agecorr.h2<-MAmod.agecorr$VCV[, "animal"]/MAmod.agecorr.vp #find heritability as proportion of Vp caused by the pedigree
posterior.mode(MAmod.agecorr.h2) #view heritability
HPDinterval(MAmod.agecorr.h2) #view credibility intervals
MAmod.agecorr.r<-MAmod.agecorr$VCV[, "units"]/MAmod.agecorr.vp #find residual variance
posterior.mode(MAmod.agecorr.r) #view residual variance
HPDinterval(MAmod.agecorr.r) #credibility intervals
MAmod.agecorr.pe<-MAmod.agecorr$VCV[, "BirdID"]/MAmod.agecorr.vp #find permanent environment effects
posterior.mode(MAmod.agecorr.pe) #view PE variance
HPDinterval(MAmod.agecorr.pe) #crediblity intervals
MAmod.agecorr.by<-MAmod.agecorr$VCV[, "Cohort"]/MAmod.agecorr.vp #find variance caused by cohort
posterior.mode(MAmod.agecorr.by) #view cohort effects
HPDinterval(MAmod.agecorr.by) #credibility intervals

#find MA age-corrected evolvability (mean-standardised)
posterior.mode(MAmod.agecorr$VCV[,"animal"])/(mean(MA$MA)*mean(MA$MA))

#mask by age====
MA.ages <- split( MA , f = MA$age ) #split dataset into a list of dataframes of each age
for (i in 1:length(MA.ages)) {
  assign(paste0("MA.age", i), as.data.frame(MA.ages[[i]]))
} #change list to separate dataframes for each age

#plot mask sample size by age 
MA.samplesize<-MA%>%group_by(age)%>%summarise(n=length(unique(BirdID)))#check sample sizes of each age group
head(MA.samplesize)
MA.age4to8 <- rbind(MA.age4, MA.age5, MA.age6, MA.age7, MA.age8) #create df with all age 4-8 because of the small sample sizes
length(MA.age4to8$BirdID) #check number of observations
length(unique(MA.age4to8$BirdID)) #check number of birds in new, combined group
MA.samplesize<-rbind(MA.samplesize, c("4 to 8", 51)) #add older group size to sample size dataframe
MA.samplesize<-MA.samplesize[-c(4:8), ] #remove individual sample size of ages 4, 5, 6, 7 and 8
MA.samplesize$n<-as.numeric(MA.samplesize$n) #make sample size variable numeric for plotting 
MA.samplesize$age<-as.factor(MA.samplesize$age) #make age a factor for plotting

png(filename="MA.n.byage.png", width=500, height=400, units="px") #save plot as png
ggplot(MA.samplesize, aes(x=age, y=n, group=1, fill=age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("gray78", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("n")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16))#plot bar chart of mask sample size by age
dev.off()

#age 1 mask model====
#set prior
MA.age1.var<-var(MA.age1$MA)  #assign variance to a name to use as start point for the model              
MA.prior.age1 <- list(G = list(G1 = list(V = (MA.age1.var/6), n = 1), 
                               G2 = list(V = (MA.age1.var/6), n = 1), 
                               G3 = list(V = (MA.age1.var/6), n = 1), 
                               G4 = list(V = (MA.age1.var/6), n = 1),
                               R = list(V = (MA.age1.var/6), n = 1))) #set the prior
MAmod.age1<-MCMCglmm(MA~moult, random=~animal+BirdID+Observer+Cohort+captureyear,
                     prior=MA.prior.age1, pedigree=fixedped, data=MA.age1, thin=1000, 
                     burnin=10000, nitt=1000000, verbose=F) #run best animal model
save(MAmod.age1, file="MAmod.age1.Rdata") #save age 1 model
summary(MAmod.age1) #view model results
autocorr(MAmod.age1$VCV) #check autocorrelations
autocorr(MAmod.age1$Sol) #check autocorrelations
posterior.mode(MAmod.age1$VCV)
HPDinterval(MAmod.age1$VCV)
posterior.mode(MAmod.age1$Sol)
HPDinterval(MAmod.age1$Sol)
plot(MAmod.age1) #check diagnostic plots
MA.age1.vp.full<-(MAmod.age1$VCV[, "animal"]
                  +MAmod.age1$VCV[, "BirdID"]
                  +MAmod.age1$VCV[, "Cohort"]
                  +MAmod.age1$VCV[, "units"]
                  +MAmod.age1$VCV[, "captureyear"]
                  +MAmod.age1$VCV[, "Observer"]) #find total phenotypic mask variance, age 1
posterior.mode(MA.age1.vp.full)
HPDinterval(MA.age1.vp.full)
MA.age1.vp<-(MAmod.age1$VCV[, "animal"]
             +MAmod.age1$VCV[, "BirdID"]
             +MAmod.age1$VCV[, "Cohort"]
             +MAmod.age1$VCV[, "units"]) #find adjusted mask Vp for h2 estimates, age 1
posterior.mode(MA.age1.vp)
HPDinterval(MA.age1.vp)
MA.age1.h2<-MAmod.age1$VCV[, "animal"]/MA.age1.vp #estimate age 1 heritability
posterior.mode(MA.age1.h2) #print age 1 heritablity 
HPDinterval(MA.age1.h2) #view CIs
MA.age1.pe<-MAmod.age1$VCV[, "BirdID"]/MA.age1.vp #estimate age 1 repeatability
posterior.mode(MA.age1.pe) #print age 1 repeatability 
HPDinterval(MA.age1.pe) #view CIs
MA.age1.by<-MAmod.age1$VCV[, "Cohort"]/MA.age1.vp #estimate age 1 cohort effects
posterior.mode(MA.age1.by) #print age 1 cohort effects 
HPDinterval(MA.age1.by) #view CIs
MA.age1.r<-MAmod.age1$VCV[, "units"]/MA.age1.vp #estimate age 1 residual variance
posterior.mode(MA.age1.r) #print age 1 residual variance 
HPDinterval(MA.age1.r) #view CIs

#age 2 mask model====
#set prior
MA.age2.var<-var(MA.age2$MA) #age 2 mask size variance            
MA.prior.age2 <- list(G = list(G1 = list(V = (MA.age2.var/6), n = 1), 
                               G2 = list(V = (MA.age2.var/6), n = 1), 
                               G3 = list(V = (MA.age2.var/6), n = 1),
                               G4 = list(V = (MA.age2.var/6), n = 1),
                               R = list(V = (MA.age2.var/6), n = 1))) #6 random effects

MAmod.age2<-MCMCglmm(MA~moult, random=~animal+BirdID+captureyear+
                       Observer+Cohort, prior= MA.prior.age2, pedigree=fixedped, 
                     data=MA.age2, thin=1000, burnin=10000, nitt=1000000) #run best age 2 model
save(MAmod.age2, file="MAmod.age2.Rdata") #save age 2 model
summary(MAmod.age2) #view model results
autocorr(MAmod.age2$VCV) #check autocorrelations
autocorr(MAmod.age2$Sol) #check autocorrelations
posterior.mode(MAmod.age2$VCV)
HPDinterval(MAmod.age2$VCV)
posterior.mode(MAmod.age2$Sol)
HPDinterval(MAmod.age2$Sol)
plot(MAmod.age2) #check diagnostic plots
MA.age2.vp.full<-(MAmod.age2$VCV[, "animal"]
                  +MAmod.age2$VCV[, "BirdID"]
                  +MAmod.age2$VCV[, "Cohort"]
                  +MAmod.age2$VCV[, "units"]
                  +MAmod.age2$VCV[, "captureyear"]
                  +MAmod.age2$VCV[, "Observer"]) #find total phenotypic mask size variance, age 2
posterior.mode(MA.age2.vp.full)
HPDinterval(MA.age2.vp.full)
MA.age2.vp<-(MAmod.age2$VCV[, "animal"]
             +MAmod.age2$VCV[, "BirdID"]
             +MAmod.age2$VCV[, "Cohort"]
             +MAmod.age2$VCV[, "units"]) #find adjusted Vp for mask size variance, age 2
posterior.mode(MA.age2.vp)
HPDinterval(MA.age2.vp)
MAmod.age2.h2<-MAmod.age2$VCV[, "animal"]/MA.age2.vp #estimate age 2 heritability
posterior.mode(MAmod.age2.h2) #view age 2 mask heritability
HPDinterval(MAmod.age2.h2) #view CIs
MAmod.age2.pe<-MAmod.age2$VCV[, "BirdID"]/MA.age2.vp #estimate age 2 repeatability
posterior.mode(MAmod.age2.pe) #view age 2 mask repeatability
HPDinterval(MAmod.age2.pe) #view CIs
MAmod.age2.by<-MAmod.age2$VCV[, "Cohort"]/MA.age2.vp #estimate age 2 cohort effects
posterior.mode(MAmod.age2.by) #view age 2 mask cohort effects
HPDinterval(MAmod.age2.by) #view CIs
MAmod.age2.r<-MAmod.age2$VCV[, "units"]/MA.age2.vp #estimate age 2 residual
posterior.mode(MAmod.age2.r) #view age 2 mask residual
HPDinterval(MAmod.age2.r) #view CIs

#age 3 mask model====
#set prior
MA.age3.var<-var(MA.age3$MA)  #assign variance to a name to use as start point for the model              
MA.prior.age3 <- list(G = list(G1 = list(V = (MA.age3.var/6), n = 1), 
                               G2 = list(V = (MA.age3.var/6), n = 1), 
                               G3 = list(V = (MA.age3.var/6), n = 1),
                               G4 = list(V = (MA.age3.var/6), n = 1),
                               R = list(V = (MA.age3.var/6), n = 1))) #five random effects

MAmod.age3<-MCMCglmm(MA~moult, random=~animal+BirdID+Observer+Cohort+captureyear, pedigree=fixedped,
                     prior= MA.prior.age3, data=MA.age3, thin=1000, burnin=10000, 
                     nitt=1000000, verbose=F) #run best age 3 model
save(MAmod.age3, file="MAmod.age3.Rdata") #save age 3 model to wd
summary(MAmod.age3) #view model results
autocorr(MAmod.age3$VCV) #check autocorrelations
autocorr(MAmod.age3$Sol) #check autocorrelations
posterior.mode(MAmod.age3$VCV)
HPDinterval(MAmod.age3$VCV)
posterior.mode(MAmod.age3$Sol)
HPDinterval(MAmod.age3$Sol)
plot(MAmod.age3) #check diagnostic plots
MA.age3.vp.full<-(MAmod.age3$VCV[, "animal"]
                  +MAmod.age3$VCV[, "BirdID"]
                  +MAmod.age3$VCV[, "Cohort"]
                  +MAmod.age3$VCV[, "units"]
                  +MAmod.age3$VCV[, "captureyear"]
                  +MAmod.age3$VCV[, "Observer"]) #find total mask variance, age 3
posterior.mode(MA.age3.vp.full)
HPDinterval(MA.age3.vp.full)
MA.age3.vp<-(MAmod.age3$VCV[, "animal"]
             +MAmod.age3$VCV[, "BirdID"]
             +MAmod.age3$VCV[, "Cohort"]
             +MAmod.age3$VCV[, "units"]) #find adjusted mask Vp, age 3
posterior.mode(MA.age3.vp)
HPDinterval(MA.age3.vp)
MAmod.age3.h2<-MAmod.age3$VCV[, "animal"]/MA.age3.vp #find age 3 mask heritability
posterior.mode(MAmod.age3.h2) #view age 3 heritability
HPDinterval(MAmod.age3.h2) #view CIs
MAmod.age3.pe<-MAmod.age3$VCV[, "BirdID"]/MA.age3.vp #find age 3 mask repeatability
posterior.mode(MAmod.age3.pe) #view age 3 repeatability
HPDinterval(MAmod.age3.pe) #view CIs
MAmod.age3.by<-MAmod.age3$VCV[, "Cohort"]/MA.age3.vp #find age 3 mask cohort effects
posterior.mode(MAmod.age3.by) #view age 3 cohort effects
HPDinterval(MAmod.age3.by) #view CIs
MAmod.age3.r<-MAmod.age3$VCV[, "units"]/MA.age3.vp #find age 3 mask residual
posterior.mode(MAmod.age3.r) #view age 3 residual
HPDinterval(MAmod.age3.r) #view CIs


#age 4-8 mask size====
#set prior
MA.age4to8.var<-var(MA.age4to8$MA)  #assign variance to a name to use as start point for the model              
MA.prior.age4to8 <- list(G = list(G1 = list(V = (MA.age4to8.var/6), n = 1), 
                                  G2 = list(V = (MA.age4to8.var/6), n = 1), 
                                  G3 = list(V = (MA.age4to8.var/6), n = 1),
                                  G4 = list(V = (MA.age4to8.var/6), n = 1),
                                  R = list(V = (MA.age4to8.var/6), n = 1))) #five random effects

MAmod.age4to8<-MCMCglmm(MA~moult, random=~animal+BirdID+Observer+Cohort+captureyear, 
                        pedigree=fixedped, prior= MA.prior.age4to8, 
                        data=MA.age4to8, thin=1000, burnin=10000, 
                        nitt=1000000, verbose=F)#run best animal model for age 4-8 birds
save(MAmod.age4to8, file="MAmod.age4to8.Rdata") #save model output
summary(MAmod.age4to8) #view model results
autocorr(MAmod.age4to8$VCV) #check autocorrelations
autocorr(MAmod.age4to8$Sol) #check autocorrelations
posterior.mode(MAmod.age4to8$VCV)
HPDinterval(MAmod.age4to8$VCV)
posterior.mode(MAmod.age4to8$Sol)
HPDinterval(MAmod.age4to8$Sol)
plot(MAmod.age4to8) #check diagnostic plots
MA.age4to8.vp.full<-(MAmod.age4to8$VCV[, "animal"]
                     +MAmod.age4to8$VCV[, "BirdID"]
                     +MAmod.age4to8$VCV[, "Cohort"]
                     +MAmod.age4to8$VCV[, "units"]
                     +MAmod.age4to8$VCV[, "captureyear"]
                     +MAmod.age4to8$VCV[, "Observer"]) #find total mask variance, age 4-8
posterior.mode(MA.age4to8.vp.full)
HPDinterval(MA.age4to8.vp.full)
MA.age4to8.vp<-(MAmod.age4to8$VCV[, "animal"]
                +MAmod.age4to8$VCV[, "BirdID"]
                +MAmod.age4to8$VCV[, "Cohort"]
                +MAmod.age4to8$VCV[, "units"]) #find adjusted mask Vp, age 4-8
posterior.mode(MA.age4to8.vp)
HPDinterval(MA.age4to8.vp)
MAmod.age4to8.h2<-MAmod.age4to8$VCV[, "animal"]/MA.age4to8.vp #find age 4-8 heritability
posterior.mode(MAmod.age4to8.h2) #view age 4-8 heritability
HPDinterval(MAmod.age4to8.h2) #view CIs
MAmod.age4to8.pe<-MAmod.age4to8$VCV[, "BirdID"]/MA.age4to8.vp #find age 4-8 repeatability
posterior.mode(MAmod.age4to8.pe) #view age 4-8 repeatability
HPDinterval(MAmod.age4to8.pe) #view CIs
MAmod.age4to8.by<-MAmod.age4to8$VCV[, "Cohort"]/MA.age4to8.vp #find age 4-8 cohort effects
posterior.mode(MAmod.age4to8.by) #view age 4-8 cohort effects
HPDinterval(MAmod.age4to8.by) #view CIs
MAmod.age4to8.r<-MAmod.age4to8$VCV[, "units"]/MA.age4to8.vp #find age 4-8 residual
posterior.mode(MAmod.age4to8.r) #view age 4-8 residual
HPDinterval(MAmod.age4to8.r) #view CIs

#MA heritability plot====
Age<-c(1, 2, 3, "4 to 8") #create vector of age groups
age1<-c(posterior.mode(MA.age1.h2), HPDinterval(MA.age1.h2)[1], 
        HPDinterval(MA.age1.h2)[2]) #join age 1 heritability with its CIs
age2<-c(posterior.mode(MAmod.age2.h2), HPDinterval(MAmod.age2.h2)[1], 
        HPDinterval(MAmod.age2.h2)[2]) #join age 2 heritability with its CIs
age3<-c(posterior.mode(MAmod.age3.h2), HPDinterval(MAmod.age3.h2)[1], 
        HPDinterval(MAmod.age3.h2)[2]) #join age 3 heritability with its CIs
age4to8<-c(posterior.mode(MAmod.age4to8.h2), HPDinterval(MAmod.age4to8.h2)[1], 
           HPDinterval(MAmod.age4to8.h2)[2]) #join age 4-8 heritability with its CIs
MAh2.byage<-as.data.frame(rbind(age1, age2, age3, age4to8), header=TRUE) #join heritabilities by age in a dataframe
MAh2.byage$age<-Age #add 'age' vector for use as label
MAh2.byage$Variance<-as.numeric(as.character(MAh2.byage$var1)) #make variance estimates numeric
MAh2.byage$Lower<-as.numeric(as.character(MAh2.byage$V2)) #make lower CIs numeric
MAh2.byage$Upper<-as.numeric(as.character(MAh2.byage$V3)) #make upper CIs numeric

#create graph showing heritability estimates by age with 95% CIs
png(filename="MA.h2.byage.png", width=500, height=400, units="px") #save plot as png
ggplot(MAh2.byage, aes(x=age, y=Variance, group=1, fill=age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("gray", 4))+
  geom_errorbar(size=0.4, width=0.06, aes(ymin=MAh2.byage$Lower, ymax=MAh2.byage$Upper), colour="black") +
  theme_classic() +
  xlab("Age") +
  ylab("Mask Heritability")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16)) #create plot
dev.off()

# MA evolvability by age (mean-standardised)====
MA.I.age1<-posterior.mode(MAmod.age1$VCV[,"animal"])/(mean(MA.age1$MA)*mean(MA.age1$MA)) #age 1
MA.I.age2<-posterior.mode(MAmod.age2$VCV[,"animal"])/(mean(MA.age2$MA)*mean(MA.age2$MA)) #age 2
MA.I.age3<-posterior.mode(MAmod.age3$VCV[,"animal"])/(mean(MA.age3$MA)*mean(MA.age3$MA)) #age 3
MA.I.age4to8<-posterior.mode(MAmod.age4to8$VCV[,"animal"])/(mean(MA.age4to8$MA)*mean(MA.age4to8$MA)) #age 4-8
MA.I<-c(MA.I.age1, MA.I.age2, MA.I.age3, MA.I.age4to8) #join evolvabilities by age
Age<-c(1, 2, 3, "4 to 8")
MA.I.byage<-cbind(Age, MA.I)
MA.I.byage<-as.data.frame(MA.I.byage) #create dataframes of evolvabilities by age
MA.I.byage$Age<-as.factor(MA.I.byage$Age)
MA.I.byage$MA.I<-as.numeric(as.character(MA.I.byage$MA.I))
MA.I.byage$MA.I<-MA.I.byage$MA.I*100 #find total evolvability (times each estimate by 100)

#plot evolvability by age of mask size
png(filename="MA.I.byage.png", width=500, height=400, units="px") #save plot as png
ggplot(MA.I.byage, aes(x=Age, y=MA.I, group=1, fill=Age)) +
  geom_bar(stat="identity", position=position_dodge(), color="black")+
  scale_fill_manual(values=rep("grey12", 4))+
  theme_classic() +
  xlab("Age") +
  ylab("Mask Evolvability")+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position = "none", axis.text=element_text(size=16),
        axis.title=element_text(size=16))#plot bar chart of mask sample size by age
dev.off()

#SELECTION GRADIENTS====
sg.data<-read.csv("captures.csv", header=TRUE) #import capture data
head(data) #check capture data 
str(data) #check data structure

fitness<-read.table("fitness.txt", header=TRUE) #import fitness data
head(fitness) #check fitness data
str(fitness) #check data structure
names(sg.data)[names(sg.data) == "captureyear"] <- "Year" #change name of capture year in main dataset to allow merging with fitness data
sg.data$Year<-format(as.Date(sg.data$CaptureDate, format="%d/%m/%Y"),"%Y") #create year variable
sg.data<-merge(sg.data, fitness, by=c("Year", "BirdID")) #merge dataframes to add fitness info to measurements
head(sg.data) #check merged dataset

#split into datasets by trait
VB.sg<-subset(sg.data, sg.data$VB!="NA")
HB.sg<-subset(sg.data, sg.data$HB!="NA")
MA.sg<-subset(sg.data, sg.data$MA!="NA")

#remove observer "AS" as done in previous analysis for badge sizes
VB.sg<-subset(VB.sg, VB.sg$Observer!="AS")
HB.sg<-subset(HB.sg, HB.sg$Observer!="AS")

#VB size selection====
#selection gradient by year
VB.sel.std<-subset(VB.sg, VB.sg$Recruits!="NA") #remove individuals without recruitment data
VB.n<-VB.sel.std%>%group_by(Year)%>%summarise(n=length(BirdID)) #check sample sizes for each year- less than 10 not good
VB.sel.std<-ddply(VB.sg, c("Year"), transform, VB.std=scale(VB)) #z-transform VB within years as a new df
head(VB.sel.std) #view new df
par(mfrow=c(2,1)) #set display to show 2 plots
boxplot(VB.sel.std$VB.std~VB.sel.std$Year) #view std. VBs by year 
plot(jitter(VB.sel.std$Recruits)~VB.sel.std$VB.std) #view r-ship of recruits and std. VB
VB.sel.std<-ddply(VB.sel.std, c("Year"), transform, recruits.std=scale(Recruits)) #z-transform no. of recruits in the same df
head(VB.sel.std) #check df
boxplot(VB.sel.std$recruits.std~VB.sel.std$Year) #view std. recruits by year
plot(jitter(VB.sel.std$recruits.std)~VB.sel.std$VB.std) #view std. r-ship of VB and recruits
dev.off() #reset display

#create new dataframe for VB selection gradient estimates
est<-rep(0, 13) #data from 2003-2015
err<-rep(0, 13) #create blank var. for standard errors
VBsg.by.yr<-cbind(est,err) #join estimate and error variables
VBsg.by.yr<-as.data.frame(VBsg.by.yr) #make them a dataframe
head(VBsg.by.yr) #check dataframe

#loop: linear regressions of recruits against VB within each year, assigning the resulting estimates and errors to df (VBsg.by.yr)
for(i in 2003:2015){
  m<-(lm(VB.sel.std$recruits.std[VB.sel.std$Year==i]~VB.sel.std$VB.std[VB.sel.std$Year==i]))
  j<-i-2002
  VBsg.by.yr$est[j]<-m$coefficients[2]
  VBsg.by.yr$err[j]<-summary(m)$coefficients[2,2]
}

#find 95% CIs using standard errors
VBsg.by.yr$low<-VBsg.by.yr$est-1.96*(VBsg.by.yr$err) #lower CI
VBsg.by.yr$high<-VBsg.by.yr$est+1.96*(VBsg.by.yr$err) #upper CI
head(VBsg.by.yr) #check final VB sg dataframe

#VB selection gradient plot
VBsg.by.yr$Year<-as.factor(c(2003:2015)) #make vector of years included
png("VB.sgbyyear.png", height=500, width=700, units="px")
ggplot() + 
  geom_errorbar(data=VBsg.by.yr, mapping=aes(x=Year, ymin=low, ymax=high), width=0.0, color="black") + 
  geom_point(data=VBsg.by.yr, mapping=aes(x=Year, y=est), size=3, shape=19)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black")) +
  theme(axis.text=element_text(size = 18, colour="black"), 
        axis.title=element_text(size=24))+
  ylab("Visible badge selection gradient")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))+
  geom_abline(intercept=0, slope=0, colour="grey45", linetype="dashed")+
  coord_cartesian(ylim = (-1.0:1.0))
dev.off() #plot VB selection gradients by year and save to wd

#HB size selection====
#selection gradients by year 
HB.sel.std<-subset(HB.sg, HB.sg$Recruits!="NA")  #remove birds without recruitment data
HB.n<-HB.sel.std%>%group_by(Year)%>%summarise(n=length(BirdID)) #check sample sizes for each year- ideally all more than 10
HB.sel.std<-ddply(HB.sg, c("Year"), transform, HB.std=scale(HB)) #z-transform HB size within each year in a new df
head(HB.sel.std)  #view new df
par(mfrow=c(2,1)) #set display to show 2 graphs
boxplot(HB.sel.std$HB.std~HB.sel.std$Year) #view standardised HB by year
plot(jitter(HB.sel.std$Recruits)~HB.sel.std$HB.std) #plot r-ship between recruits and std. HB size
dev.off() #reset display
HB.sel.std<-ddply(HB.sel.std, c("Year"), transform, recruits.std=scale(Recruits)) #z-transform no. of recruits
head(HB.sel.std) #check resulting df
par(mfrow=c(2,1)) #set display to show 2 graphs
boxplot(HB.sel.std$recruits.std~HB.sel.std$Year) #view std. recruits by year
plot(jitter(HB.sel.std$recruits.std)~HB.sel.std$HB.std) #view std. r-ship between recruits and HB size
dev.off() #reset display

#create new dataframe for parameter estimates
est<-rep(0, 16) #variable for assigning sg. estimates - data from 2000-2015
err<-rep(0, 16) #variable for the associated standard errors
HBsg.by.yr<-cbind(est,err) #join variables
HBsg.by.yr<-as.data.frame(HBsg.by.yr) #convert to a dataframe
head(HBsg.by.yr) #check dataframe

#loop: linear regressions of recruits and HB for each year, assigning the sg. and errors to the empty dataframe
for(i in 2000:2015){
  m<-(lm(HB.sel.std$recruits.std[HB.sel.std$Year==i]~HB.sel.std$HB.std[HB.sel.std$Year==i]))
  j<-i-1999
  HBsg.by.yr$est[j]<-m$coefficients[2]
  HBsg.by.yr$err[j]<-summary(m)$coefficients[2,2]
}

#find 95% CIs using the standard errors
HBsg.by.yr$low<-HBsg.by.yr$est-1.96*(HBsg.by.yr$err) #lower CI
HBsg.by.yr$high<-HBsg.by.yr$est+1.96*(HBsg.by.yr$err) #upper CI
head(HBsg.by.yr) #check complete HB sg. table

#plot the HB yearly selection gradients
HBsg.by.yr$Year<-as.factor(c(2000:2015)) #make vector of the years of analysis
png("HB.sgbyyear.png", width=700, height=500, units="px")
ggplot() + 
  geom_errorbar(data=HBsg.by.yr, mapping=aes(x=Year, ymin=low, ymax=high), width=0.0, color="black") + 
  geom_point(data=HBsg.by.yr, mapping=aes(x=Year, y=est), size=3, shape=19)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black")) +
  theme(axis.text=element_text(size = 18, colour="black"), 
        axis.title=element_text(size=24))+
  ylab("Hidden badge selection gradient")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))+
  geom_abline(intercept=0, slope=0, colour="grey45", linetype="dashed")+
  coord_cartesian(ylim = (-1.0:1.0))
dev.off() #plot the selection gradients by year with error bars and save to wd

#MASK size selection====

#selection gradients by year 
MA.sel.std<-ddply(MA.sg, c("Year"), transform, MA.std=scale(MA)) #create df with z-standardised mask size within each year 
MA.n<-MA.sel.std%>%group_by(Year)%>%summarise(n=length(BirdID)) #check sample sizes for each year - less than 10 is not good 
par(mfrow=c(2,1)) #set display to show 2 graphs simultaneously
boxplot(MA.sel.std$MA.std~MA.sel.std$Year) #view standardised mask size by year
plot(jitter(MA.sel.std$Recruits)~MA.sel.std$MA.std) #view number of recruits by mask size
dev.off() #reset display
MA.sel.std<-ddply(MA.sel.std, c("Year"), transform, recruits.std=scale(Recruits)) #standardise no. of recruits
head(MA.sel.std) #view resulting dataframe
par(mfrow=c(2,1)) #set display to show 2 graphs simultaneously
boxplot(MA.sel.std$recruits.std~MA.sel.std$Year) #visualise std. recruits by year
plot(jitter(MA.sel.std$recruits.std)~MA.sel.std$MA.std) #plot standardised relationship of recruits and mask
dev.off() #reset display

#create new dataframe for parameter estimates
est<-rep(0, 10) #this is where yearly selection gradient estimates will go - recruitment data from 2006-2015
err<-rep(0, 10) #this is where the standard errors will be assigned
MAsg.by.yr<-cbind(est,err) #join the blank variables for sg. and errors
MAsg.by.yr<-as.data.frame(MAsg.by.yr) #make the variables a dataframe
head(MAsg.by.yr) #view the resulting empty dataframe

#loop: linear regressions within each year and assign the resulting sg and error estimates to the df
for(i in 2006:2015){
  m<-(lm(MA.sel.std$recruits.std[MA.sel.std$Year==i]~MA.sel.std$MA.std[MA.sel.std$Year==i]))
  j<-i-2005
  MAsg.by.yr$est[j]<-m$coefficients[2]
  MAsg.by.yr$err[j]<-summary(m)$coefficients[2,2]
}

#use resulting standard errors to find 95% CIs 
MAsg.by.yr$low<-MAsg.by.yr$est-1.96*(MAsg.by.yr$err) #lower CI
MAsg.by.yr$high<-MAsg.by.yr$est+1.96*(MAsg.by.yr$err) #upper CI
head(MAsg.by.yr) #view final mask selection gradient table

MAsg.by.yr$Year<-as.factor(c(2006:2015)) #create a vector of all the years included in analysis
png("MAsgplot.png", width=700, height=500, units="px")
ggplot() + 
  geom_errorbar(data=MAsg.by.yr, mapping=aes(x=Year, ymin=low, ymax=high), width=0.0, color="black") + 
  geom_point(data=MAsg.by.yr, mapping=aes(x=Year, y=est), size=3, shape=19)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black")) +
  theme(axis.text=element_text(size = 18, colour="black"), 
        axis.title=element_text(size=24))+
  ylab("Mask selection gradient")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))+
  geom_abline(intercept=0, slope=0, colour="grey45", linetype="dashed")
dev.off() #plot the selection gradients by year with error bars and save to wd

#sel. sample size plot ====
VB.n<-as.data.frame(VB.n) #make visible badge sample sizes a dataframe
VB.n$Trait<-rep("VB", length(VB.n$Year)) #create variable with trait name
HB.n<-as.data.frame(HB.n) #make hidden badge sample sizes a dataframe
HB.n$Trait<-rep("HB", length(HB.n$Year)) #create variable with trait name
MA.n<-as.data.frame(MA.n) #make mask sample sizes a dataframe
MA.n$Trait<-rep("MA", length(MA.n$Year)) #create variable with trait name
sg.n<-rbind(VB.n, HB.n) #merge traits
sg.n<-rbind(sg.n, MA.n) #merge traits into one dataset
head(sg.n) #check dataset
sg.n$Trait <- factor(sg.n$Trait, levels = c('HB', 'VB', 'MA')) #order traits in variable so they don't appear alphabetically in plot
#plot all trait sample sizes for sel. grad. analysis by year
sg.n<-filter(sg.n, Year<2016) #remove 2016 & 17 data as gradients only up until 2015
png(filename="selgrad.samplesizes.png", width=700, height=500) #save as a png
sg.n %>% 
  complete(Year, Trait) %>% 
  ggplot(aes(x = Year, y = n, fill = Trait)) +
  geom_col(position = position_dodge(), colour="black")+
  scale_fill_manual(values=c("black", "darkgrey", "white"))+
  theme_classic(base_size=16)+
  theme(axis.text.x = element_text(angle = 45, hjust=1))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black")) +
  scale_y_continuous(expand=c(0,0), breaks=round(seq(0, 160, by=20), 1) ) #plot sample sizes by year of males used in selection analyses
dev.off()

##END OF SCRIPT
